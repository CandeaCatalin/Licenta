/*
Deployment script for QueueManagementTesting

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "QueueManagementTesting"
:setvar DefaultFilePrefix "QueueManagementTesting"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[EventCategory]...';


GO
CREATE TABLE [dbo].[EventCategory] (
    [Id]   INT            NOT NULL,
    [Name] NVARCHAR (100) NOT NULL,
    CONSTRAINT [PK_EventCategory] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[EventLog]...';


GO
CREATE TABLE [dbo].[EventLog] (
    [Id]              INT            NOT NULL,
    [Value]           NVARCHAR (MAX) NULL,
    [EventCategoryId] INT            NOT NULL,
    [Timestamp]       DATETIME       NOT NULL,
    CONSTRAINT [PK_EventLog] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Index [dbo].[EventLog].[IX_EventLog_EventCategory]...';


GO
CREATE NONCLUSTERED INDEX [IX_EventLog_EventCategory]
    ON [dbo].[EventLog]([EventCategoryId] ASC);


GO
PRINT N'Creating Index [dbo].[EventLog].[IX_EventLog_Timestamp]...';


GO
CREATE NONCLUSTERED INDEX [IX_EventLog_Timestamp]
    ON [dbo].[EventLog]([Timestamp] ASC);


GO
PRINT N'Creating Table [dbo].[PhysicalQueues]...';


GO
CREATE TABLE [dbo].[PhysicalQueues] (
    [Id]            INT            NOT NULL,
    [Name]          NVARCHAR (100) NOT NULL,
    [Description]   NVARCHAR (MAX) NULL,
    [QueueId]       INT            NULL,
    [EstimatedTime] DATETIME       NOT NULL,
    [CreatedTime]   DATETIME       NOT NULL,
    CONSTRAINT [PK_PhysicalQueue] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Index [dbo].[PhysicalQueues].[IX_PhysicalQueues_QueueId]...';


GO
CREATE NONCLUSTERED INDEX [IX_PhysicalQueues_QueueId]
    ON [dbo].[PhysicalQueues]([QueueId] ASC);


GO
PRINT N'Creating Table [dbo].[Queues]...';


GO
CREATE TABLE [dbo].[Queues] (
    [Id]          INT            NOT NULL,
    [Name]        NVARCHAR (200) NOT NULL,
    [Description] NVARCHAR (MAX) NULL,
    [CreatedTime] DATETIME       NOT NULL,
    CONSTRAINT [PK_Queues] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[UserRoles]...';


GO
CREATE TABLE [dbo].[UserRoles] (
    [Id]   INT            NOT NULL,
    [Name] NVARCHAR (100) NOT NULL,
    CONSTRAINT [PK_UserRoles] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [Id]              INT            IDENTITY (1, 1) NOT NULL,
    [FirstName]       NVARCHAR (100) NOT NULL,
    [LastName]        NVARCHAR (100) NOT NULL,
    [Email]           NVARCHAR (250) NOT NULL,
    [Password]        NVARCHAR (MAX) NOT NULL,
    [IsActive]        BIT            NOT NULL,
    [UserRolesId]     INT            NOT NULL,
    [CreatedTime]     DATETIME       NOT NULL,
    [QueueId]         INT            NULL,
    [UsersToQueuesId] INT            NULL,
    [PhysicalQueueId] INT            NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UC_Users_Email] UNIQUE NONCLUSTERED ([Email] ASC)
);


GO
PRINT N'Creating Index [dbo].[Users].[IX_Users_Email]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Users_Email]
    ON [dbo].[Users]([Email] ASC);


GO
PRINT N'Creating Index [dbo].[Users].[IX_Users_QueueId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Users_QueueId]
    ON [dbo].[Users]([QueueId] ASC);


GO
PRINT N'Creating Index [dbo].[Users].[IX_Users_UserRolesId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Users_UserRolesId]
    ON [dbo].[Users]([UserRolesId] ASC);


GO
PRINT N'Creating Index [dbo].[Users].[IX_Users_PhysicalQueueId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Users_PhysicalQueueId]
    ON [dbo].[Users]([PhysicalQueueId] ASC);


GO
PRINT N'Creating Table [dbo].[UsersToQueues]...';


GO
CREATE TABLE [dbo].[UsersToQueues] (
    [Id]              INT      NOT NULL,
    [UserId]          INT      NOT NULL,
    [PhysicalQueueId] INT      NOT NULL,
    [TimeAdded]       DATETIME NOT NULL,
    [TimePassed]      DATETIME NOT NULL,
    [IsPassed]        BIT      NOT NULL,
    CONSTRAINT [PK_UsersToQueues] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Index [dbo].[UsersToQueues].[IX_UsersToQueues_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_UsersToQueues_UserId]
    ON [dbo].[UsersToQueues]([UserId] ASC);


GO
PRINT N'Creating Index [dbo].[UsersToQueues].[IX_UsersToQueues_PhysicalQueueId]...';


GO
CREATE NONCLUSTERED INDEX [IX_UsersToQueues_PhysicalQueueId]
    ON [dbo].[UsersToQueues]([PhysicalQueueId] ASC);


GO
PRINT N'Creating Default Constraint [dbo].[DF_Timestamp_EventLog]...';


GO
ALTER TABLE [dbo].[EventLog]
    ADD CONSTRAINT [DF_Timestamp_EventLog] DEFAULT GETUTCDATE() FOR [Timestamp];


GO
PRINT N'Creating Default Constraint [dbo].[DF_EstimatedTime_PhysicalQueues]...';


GO
ALTER TABLE [dbo].[PhysicalQueues]
    ADD CONSTRAINT [DF_EstimatedTime_PhysicalQueues] DEFAULT GETUTCDATE() FOR [EstimatedTime];


GO
PRINT N'Creating Default Constraint [dbo].[DF_CreatedTime_PhysicalQueues]...';


GO
ALTER TABLE [dbo].[PhysicalQueues]
    ADD CONSTRAINT [DF_CreatedTime_PhysicalQueues] DEFAULT GETUTCDATE() FOR [CreatedTime];


GO
PRINT N'Creating Default Constraint [dbo].[DF_CreatedTime_Queues]...';


GO
ALTER TABLE [dbo].[Queues]
    ADD CONSTRAINT [DF_CreatedTime_Queues] DEFAULT GETUTCDATE() FOR [CreatedTime];


GO
PRINT N'Creating Default Constraint [dbo].[DF_CreatedTime_User]...';


GO
ALTER TABLE [dbo].[Users]
    ADD CONSTRAINT [DF_CreatedTime_User] DEFAULT GETUTCDATE() FOR [CreatedTime];


GO
PRINT N'Creating Default Constraint [dbo].[DF_TimeAdded_UsersToQueues]...';


GO
ALTER TABLE [dbo].[UsersToQueues]
    ADD CONSTRAINT [DF_TimeAdded_UsersToQueues] DEFAULT GETUTCDATE() FOR [TimeAdded];


GO
PRINT N'Creating Default Constraint [dbo].[DF_TimePassed_UsersToQueues]...';


GO
ALTER TABLE [dbo].[UsersToQueues]
    ADD CONSTRAINT [DF_TimePassed_UsersToQueues] DEFAULT GETUTCDATE() FOR [TimePassed];


GO
PRINT N'Creating Foreign Key [dbo].[FK_EventLog_EventCategory]...';


GO
ALTER TABLE [dbo].[EventLog]
    ADD CONSTRAINT [FK_EventLog_EventCategory] FOREIGN KEY ([EventCategoryId]) REFERENCES [dbo].[EventLog] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_PhysicalQueues_Queues]...';


GO
ALTER TABLE [dbo].[PhysicalQueues]
    ADD CONSTRAINT [FK_PhysicalQueues_Queues] FOREIGN KEY ([QueueId]) REFERENCES [dbo].[Queues] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Users_UserRoles]...';


GO
ALTER TABLE [dbo].[Users]
    ADD CONSTRAINT [FK_Users_UserRoles] FOREIGN KEY ([UserRolesId]) REFERENCES [dbo].[UserRoles] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Users_Queues]...';


GO
ALTER TABLE [dbo].[Users]
    ADD CONSTRAINT [FK_Users_Queues] FOREIGN KEY ([QueueId]) REFERENCES [dbo].[Queues] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Users_PhysicalQueues]...';


GO
ALTER TABLE [dbo].[Users]
    ADD CONSTRAINT [FK_Users_PhysicalQueues] FOREIGN KEY ([PhysicalQueueId]) REFERENCES [dbo].[PhysicalQueues] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Users_UsersToQueuesId]...';


GO
ALTER TABLE [dbo].[Users]
    ADD CONSTRAINT [FK_Users_UsersToQueuesId] FOREIGN KEY ([UsersToQueuesId]) REFERENCES [dbo].[UsersToQueues] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UsersToQueues_PhysicalQueue]...';


GO
ALTER TABLE [dbo].[UsersToQueues]
    ADD CONSTRAINT [FK_UsersToQueues_PhysicalQueue] FOREIGN KEY ([PhysicalQueueId]) REFERENCES [dbo].[PhysicalQueues] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UsersToQueues_User]...';


GO
ALTER TABLE [dbo].[UsersToQueues]
    ADD CONSTRAINT [FK_UsersToQueues_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

/*
	INSERT ROLES FOR USERS
*/
IF NOT EXISTS(SELECT * FROM [dbo].[UserRoles] WHERE [Name] = 'Admin' AND [Id] = 1) 
	BEGIN 
		INSERT INTO [dbo].[UserRoles]([Id],[Name]) VALUES (1,'Admin') 
	END
	
IF NOT EXISTS(SELECT * FROM [dbo].[UserRoles] WHERE [Name] = 'User' AND [Id] = 2) 
	BEGIN 
		INSERT INTO [dbo].[UserRoles]([Id],[Name]) VALUES (2,'User') 
	END

/*
	INSERT CATEGORIES FOR EVENTS
*/

IF NOT EXISTS(SELECT * FROM [dbo].[EventCategory] WHERE [Name] = 'Success' AND [Id] = 1) 
	BEGIN 
		INSERT INTO [dbo].[EventCategory]([Id],[Name]) VALUES (1,'Success') 
	END
IF NOT EXISTS(SELECT * FROM [dbo].[EventCategory] WHERE [Name] = 'Error' AND [Id] = 2) 
	BEGIN 
		INSERT INTO [dbo].[EventCategory]([Id],[Name]) VALUES (2,'Error') 
	END
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
