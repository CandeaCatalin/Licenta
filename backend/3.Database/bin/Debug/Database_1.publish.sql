/*
Deployment script for QueueManagementTesting

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "QueueManagementTesting"
:setvar DefaultFilePrefix "QueueManagementTesting"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating Table [dbo].[Queues]...';


GO
CREATE TABLE [dbo].[Queues] (
    [Id]          INT            NOT NULL,
    [Name]        NVARCHAR (200) NOT NULL,
    [Description] NVARCHAR (MAX) NULL,
    [CreatedTime] DATETIME       NOT NULL,
    CONSTRAINT [PK_Queues] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[UserRole]...';


GO
CREATE TABLE [dbo].[UserRole] (
    [Id]   INT            NOT NULL,
    [Name] NVARCHAR (100) NOT NULL,
    CONSTRAINT [PK_UserRole] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [Id]              INT            NOT NULL,
    [FirstName]       NVARCHAR (100) NOT NULL,
    [LastName]        NVARCHAR (100) NOT NULL,
    [Email]           NVARCHAR (100) NOT NULL,
    [Password]        NVARCHAR (MAX) NOT NULL,
    [IsActive]        BIT            NOT NULL,
    [UserRoleId]      INT            NOT NULL,
    [CreatedTime]     DATETIME       NOT NULL,
    [QueueId]         INT            NOT NULL,
    [PhysicalQueueId] INT            NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UC_Users_Email] UNIQUE NONCLUSTERED ([Email] ASC)
);


GO
PRINT N'Creating Index [dbo].[Users].[IX_Users_Email]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Users_Email]
    ON [dbo].[Users]([Email] ASC);


GO
PRINT N'Creating Index [dbo].[Users].[IX_Users_QueueId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Users_QueueId]
    ON [dbo].[Users]([QueueId] ASC);


GO
PRINT N'Creating Index [dbo].[Users].[IX_Users_UserRoleId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Users_UserRoleId]
    ON [dbo].[Users]([UserRoleId] ASC);


GO
PRINT N'Creating Index [dbo].[Users].[IX_Users_PhysicalQueueId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Users_PhysicalQueueId]
    ON [dbo].[Users]([PhysicalQueueId] ASC);


GO
PRINT N'Creating Default Constraint [dbo].[DF_CreatedTime_Queues]...';


GO
ALTER TABLE [dbo].[Queues]
    ADD CONSTRAINT [DF_CreatedTime_Queues] DEFAULT GETUTCDATE() FOR [CreatedTime];


GO
PRINT N'Creating Default Constraint [dbo].[DF_CreatedTime_User]...';


GO
ALTER TABLE [dbo].[Users]
    ADD CONSTRAINT [DF_CreatedTime_User] DEFAULT GETUTCDATE() FOR [CreatedTime];


GO
PRINT N'Creating Default Constraint [dbo].[DF_QueueId_User]...';


GO
ALTER TABLE [dbo].[Users]
    ADD CONSTRAINT [DF_QueueId_User] DEFAULT (0) FOR [QueueId];


GO
PRINT N'Creating Default Constraint [dbo].[DF_PhysicalQueueId_User]...';


GO
ALTER TABLE [dbo].[Users]
    ADD CONSTRAINT [DF_PhysicalQueueId_User] DEFAULT (0) FOR [PhysicalQueueId];


GO
PRINT N'Creating Default Constraint [dbo].[DF_Timestamp_EventLog]...';


GO
ALTER TABLE [dbo].[EventLog]
    ADD CONSTRAINT [DF_Timestamp_EventLog] DEFAULT GETUTCDATE() FOR [Timestamp];


GO
PRINT N'Creating Default Constraint [dbo].[DF_CreatedTime_PhysicalQueues]...';


GO
ALTER TABLE [dbo].[PhysicalQueues]
    ADD CONSTRAINT [DF_CreatedTime_PhysicalQueues] DEFAULT GETUTCDATE() FOR [CreatedTime];


GO
PRINT N'Creating Default Constraint [dbo].[DF_EstimatedTime_PhysicalQueues]...';


GO
ALTER TABLE [dbo].[PhysicalQueues]
    ADD CONSTRAINT [DF_EstimatedTime_PhysicalQueues] DEFAULT GETUTCDATE() FOR [EstimatedTime];


GO
PRINT N'Creating Foreign Key [dbo].[FK_Users_UserRole]...';


GO
ALTER TABLE [dbo].[Users] WITH NOCHECK
    ADD CONSTRAINT [FK_Users_UserRole] FOREIGN KEY ([UserRoleId]) REFERENCES [dbo].[UserRole] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Users_Queues]...';


GO
ALTER TABLE [dbo].[Users] WITH NOCHECK
    ADD CONSTRAINT [FK_Users_Queues] FOREIGN KEY ([QueueId]) REFERENCES [dbo].[Queues] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Users_PhysicalQueues]...';


GO
ALTER TABLE [dbo].[Users] WITH NOCHECK
    ADD CONSTRAINT [FK_Users_PhysicalQueues] FOREIGN KEY ([PhysicalQueueId]) REFERENCES [dbo].[PhysicalQueues] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_EventLog_EventCategory]...';


GO
ALTER TABLE [dbo].[EventLog] WITH NOCHECK
    ADD CONSTRAINT [FK_EventLog_EventCategory] FOREIGN KEY ([EventCategoryId]) REFERENCES [dbo].[EventLog] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_PhysicalQueues_Queues]...';


GO
ALTER TABLE [dbo].[PhysicalQueues] WITH NOCHECK
    ADD CONSTRAINT [FK_PhysicalQueues_Queues] FOREIGN KEY ([QueueId]) REFERENCES [dbo].[Queues] ([Id]);


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

/*
	INSERT ROLES FOR USERS
*/
IF NOT EXISTS(SELECT * FROM [dbo].[UserRole] WHERE [Name] = 'Admin' AND [Id] = 1) 
	BEGIN 
		INSERT INTO [dbo].[UserRole]([Id],[Name]) VALUES (1,'Admin') 
	END
	
IF NOT EXISTS(SELECT * FROM [dbo].[UserRole] WHERE [Name] = 'User' AND [Id] = 2) 
	BEGIN 
		INSERT INTO [dbo].[UserRole]([Id],[Name]) VALUES (2,'User') 
	END

/*
	INSERT CATEGORIES FOR EVENTS
*/

IF NOT EXISTS(SELECT * FROM [dbo].[EventCategory] WHERE [Name] = 'Success' AND [Id] = 1) 
	BEGIN 
		INSERT INTO [dbo].[EventCategory]([Id],[Name]) VALUES (1,'Success') 
	END
IF NOT EXISTS(SELECT * FROM [dbo].[EventCategory] WHERE [Name] = 'Error' AND [Id] = 2) 
	BEGIN 
		INSERT INTO [dbo].[EventCategory]([Id],[Name]) VALUES (2,'Error') 
	END
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Users] WITH CHECK CHECK CONSTRAINT [FK_Users_UserRole];

ALTER TABLE [dbo].[Users] WITH CHECK CHECK CONSTRAINT [FK_Users_Queues];

ALTER TABLE [dbo].[Users] WITH CHECK CHECK CONSTRAINT [FK_Users_PhysicalQueues];

ALTER TABLE [dbo].[EventLog] WITH CHECK CHECK CONSTRAINT [FK_EventLog_EventCategory];

ALTER TABLE [dbo].[PhysicalQueues] WITH CHECK CHECK CONSTRAINT [FK_PhysicalQueues_Queues];


GO
PRINT N'Update complete.';


GO
