/*
Deployment script for QueueManagementTesting

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "QueueManagementTesting"
:setvar DefaultFilePrefix "QueueManagementTesting"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping Index [dbo].[PhysicalQueues].[IX_PhysicalQueues_QueueId]...';


GO
DROP INDEX [IX_PhysicalQueues_QueueId]
    ON [dbo].[PhysicalQueues];


GO
PRINT N'Dropping Index [dbo].[Users].[IX_Users_PhysicalQueueId]...';


GO
DROP INDEX [IX_Users_PhysicalQueueId]
    ON [dbo].[Users];


GO
PRINT N'Dropping Index [dbo].[Users].[IX_Users_QueueId]...';


GO
DROP INDEX [IX_Users_QueueId]
    ON [dbo].[Users];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_PhysicalQueues_Queues]...';


GO
ALTER TABLE [dbo].[PhysicalQueues] DROP CONSTRAINT [FK_PhysicalQueues_Queues];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_Users_PhysicalQueues]...';


GO
ALTER TABLE [dbo].[Users] DROP CONSTRAINT [FK_Users_PhysicalQueues];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_Users_Queues]...';


GO
ALTER TABLE [dbo].[Users] DROP CONSTRAINT [FK_Users_Queues];


GO
PRINT N'Altering Table [dbo].[PhysicalQueues]...';


GO
ALTER TABLE [dbo].[PhysicalQueues] ALTER COLUMN [QueueId] INT NULL;


GO
PRINT N'Creating Index [dbo].[PhysicalQueues].[IX_PhysicalQueues_QueueId]...';


GO
CREATE NONCLUSTERED INDEX [IX_PhysicalQueues_QueueId]
    ON [dbo].[PhysicalQueues]([QueueId] ASC);


GO
PRINT N'Altering Table [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users] ALTER COLUMN [PhysicalQueueId] INT NULL;

ALTER TABLE [dbo].[Users] ALTER COLUMN [QueueId] INT NULL;

ALTER TABLE [dbo].[Users] ALTER COLUMN [UsersToQueuesId] INT NULL;


GO
PRINT N'Creating Index [dbo].[Users].[IX_Users_PhysicalQueueId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Users_PhysicalQueueId]
    ON [dbo].[Users]([PhysicalQueueId] ASC);


GO
PRINT N'Creating Index [dbo].[Users].[IX_Users_QueueId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Users_QueueId]
    ON [dbo].[Users]([QueueId] ASC);


GO
PRINT N'Creating Foreign Key [dbo].[FK_PhysicalQueues_Queues]...';


GO
ALTER TABLE [dbo].[PhysicalQueues] WITH NOCHECK
    ADD CONSTRAINT [FK_PhysicalQueues_Queues] FOREIGN KEY ([QueueId]) REFERENCES [dbo].[Queues] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Users_PhysicalQueues]...';


GO
ALTER TABLE [dbo].[Users] WITH NOCHECK
    ADD CONSTRAINT [FK_Users_PhysicalQueues] FOREIGN KEY ([PhysicalQueueId]) REFERENCES [dbo].[PhysicalQueues] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Users_Queues]...';


GO
ALTER TABLE [dbo].[Users] WITH NOCHECK
    ADD CONSTRAINT [FK_Users_Queues] FOREIGN KEY ([QueueId]) REFERENCES [dbo].[Queues] ([Id]);


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

/*
	INSERT ROLES FOR USERS
*/
IF NOT EXISTS(SELECT * FROM [dbo].[UserRole] WHERE [Name] = 'Admin' AND [Id] = 1) 
	BEGIN 
		INSERT INTO [dbo].[UserRole]([Id],[Name]) VALUES (1,'Admin') 
	END
	
IF NOT EXISTS(SELECT * FROM [dbo].[UserRole] WHERE [Name] = 'User' AND [Id] = 2) 
	BEGIN 
		INSERT INTO [dbo].[UserRole]([Id],[Name]) VALUES (2,'User') 
	END

/*
	INSERT CATEGORIES FOR EVENTS
*/

IF NOT EXISTS(SELECT * FROM [dbo].[EventCategory] WHERE [Name] = 'Success' AND [Id] = 1) 
	BEGIN 
		INSERT INTO [dbo].[EventCategory]([Id],[Name]) VALUES (1,'Success') 
	END
IF NOT EXISTS(SELECT * FROM [dbo].[EventCategory] WHERE [Name] = 'Error' AND [Id] = 2) 
	BEGIN 
		INSERT INTO [dbo].[EventCategory]([Id],[Name]) VALUES (2,'Error') 
	END
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[PhysicalQueues] WITH CHECK CHECK CONSTRAINT [FK_PhysicalQueues_Queues];

ALTER TABLE [dbo].[Users] WITH CHECK CHECK CONSTRAINT [FK_Users_PhysicalQueues];

ALTER TABLE [dbo].[Users] WITH CHECK CHECK CONSTRAINT [FK_Users_Queues];


GO
PRINT N'Update complete.';


GO
